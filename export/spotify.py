from collections import defaultdict

from spotipy import Spotify, SpotifyOAuth

from export.utils import polish_song_name
from settings import SpotifyConfig, UNCLASSIFIED_SONG_KEY_NAME
from tqdm import tqdm


class SpotifyExportClient(Spotify):
    def __init__(self, *args, **kwargs):
        self.tracks_found = set()
        self.tracks_not_found = defaultdict(set)
        self.tracks_with_exception = dict()

        auth_manager = SpotifyOAuth(
            client_id=SpotifyConfig.CLIENT_ID,
            client_secret=SpotifyConfig.CLIENT_SECRET,
            redirect_uri=SpotifyConfig.REDIRECT_URI,
        )
        super().__init__(auth_manager=auth_manager, *args, **kwargs)

    def search_tracks(self, data):
        for performer, songs_set in tqdm(
            data.items(), desc="Searching tracks of performers"
        ):
            query_performer = (
                f"artist:{performer}" if performer != UNCLASSIFIED_SONG_KEY_NAME else ""
            )

            for song_name in songs_set:
                track_title = polish_song_name(performer, song_name)
                query_track_title = f"track:{track_title}"

                try:
                    results = self.search(
                        q=f"{query_track_title} {query_performer}",
                        type="track",
                        limit=1,
                    )
                except Exception as e:
                    self.tracks_with_exception[track_title] = e
                    continue

                if tracks := results["tracks"]["items"]:
                    self.tracks_found.add(tracks[0]["id"])
                else:
                    self.tracks_not_found[performer].add(track_title)

    def safe_add_tracks(self, playlist_id, track_ids):
        """Spotipy allows only 100 ids per request"""

        track_ids = list(track_ids)

        for i in tqdm(
            range(0, len(track_ids), 100), desc="Adding tracks to the playlist"
        ):
            batch = track_ids[i : i + 100]
            self.playlist_add_items(playlist_id, batch)

    def export(
        self,
        data,
        playlist_name: str = "exportPlaylist",
        public=True,
        description: str = "Playlist generated by moveSongsFromPirate",
    ):
        self.search_tracks(data)

        print("Tracks found: ", len(self.tracks_found))
        print("Tracks not found: ", len(self.tracks_not_found))
        print("Exceptions raise: ", len(self.tracks_with_exception))

        playlist = self.user_playlist_create(
            user=self.me()["id"],
            name=playlist_name,
            public=public,
            description=description,
        )

        self.safe_add_tracks(playlist["id"], self.tracks_found)

        print(f"âœ… Created playlist: {playlist['external_urls']['spotify']}")
